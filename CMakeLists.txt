cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

#set the default path for built executables to the "bin" directory
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
#set the default path for built libraries to the "lib" directory
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
include_directories(${PROJECT_SOURCE_DIR}/include)

#uncomment if you have defined messages
rosbuild_genmsg()
#uncomment if you have defined services
#rosbuild_gensrv()

#common commands for building c++ executables and libraries
#rosbuild_add_library(${PROJECT_NAME} src/example.cpp)
#target_link_libraries(${PROJECT_NAME} another_library)
#rosbuild_add_boost_directories()
#rosbuild_link_boost(${PROJECT_NAME} thread)
#rosbuild_add_executable(example examples/example.cpp)
#target_link_libraries(example ${PROJECT_NAME})

find_package(Eigen3 REQUIRED)
#find_package(Cholmod REQUIRED) 
find_package(BLAS REQUIRED) 
find_package(LAPACK REQUIRED)
#find_package(CSparse REQUIRED)
include_directories(${EIGEN3_INCLUDE_DIR} /usr/include/suitesparse)
##include_directories(${EIGEN3_INCLUDE_DIR} /usr/include/mrpt/base/include/mrpt/otherlibs/CSparse)
###include_directories(${EIGEN3_INCLUDE_DIR} ${CSPARSE_INCLUDE_DIR})
add_definitions(${EIGEN_DEFINITIONS})
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
rosbuild_add_library(graph src/graph.cpp)
rosbuild_add_library(scanmatcher src/scanmatcher.cpp)
rosbuild_add_executable(${PROJECT_NAME} src/graphslam.cpp)
rosbuild_add_executable(sm_node src/sm_node.cpp)
target_link_libraries(${PROJECT_NAME} graph)
target_link_libraries(sm_node scanmatcher)
target_link_libraries(graph g2o_core g2o_stuff g2o_types_slam2d g2o_solver_cholmod g2o_solver_pcg g2o_solver_csparse cxsparse g2o_incremental g2o_csparse_extension scanmatcher csparse)
#target_link_libraries(scanmatcher "${PROJECT_SOURCE_DIR}/lib/libcsm.so")
target_link_libraries(scanmatcher "${PROJECT_SOURCE_DIR}/lib64/libcsm.so")
